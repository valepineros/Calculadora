/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author bpere
 */
public class Validez {
    
    public static boolean parentesisBalanceados(String cadena){
        boolean res=false;
        boolean valido=true;
        PilaADT pila = new PilaADT();
        
        for (int i=0; i<cadena.length() && valido; i++){
            if(cadena.charAt(i)=='(')
                pila.push(')');
                
            if(cadena.charAt(i)==')'){
                try{
                    pila.pop();
                }
                catch (Exception e){
                    valido=false;
                    return res;
                }
            }
        }
        if (pila.isEmpty())
            res=true;
        return res;
    }

    public static boolean contienePuntosDecimalesValidos(String cadena) {
        int puntoCount = 0; // Contador de puntos decimales en el número actual
        boolean dentroNumero = false; // Indica si estamos dentro de un número
        boolean despuesPunto = false; // Indica si el punto decimal ya ha sido encontrado en el número

        for (char c : cadena.toCharArray()) {
            if (Character.isDigit(c)) {
                dentroNumero = true;
            } else if (c == '.') {
                if (puntoCount > 0 || despuesPunto || !dentroNumero) {
                    return false; // Más de un punto decimal, punto decimal consecutivo o punto decimal al principio/final del número
                }
                puntoCount++;
                despuesPunto = true;
            } else {
                dentroNumero = false; // Reiniciar estado cuando se encuentra un carácter que no es un dígito
                puntoCount = 0;
                despuesPunto = false;
            }
        }

        return true;
    }
    
    public static boolean operadoresValidos (String cadena){
        boolean res=true;
        boolean valido=true;
        
        for (int i=0; i<cadena.length()-1 && valido; i++){
            char actual=cadena.charAt(i);
            char sig=cadena.charAt(i+1);
            if(esOperador(actual) && esOperador(sig)){
                valido=false;
                res=false;
            }
                
        }
        
        return res;
    }
    
    public static boolean esOperador(char c){
        return c =='+' || c =='-' || c =='*' || c =='/' || c=='^';
    }
    public static boolean esOperadorOPar(char c){
        return c =='+' || c =='-' || c =='*' || c =='/' || c=='^' || c=='(' || c==')';
    }
    
  
    public static void main(String[] args) {
        // Prueba de la función operadoresValidos
        String cadena1 = ""; // Cadena con operadores válidos
        String cadena2 = "2+5+(3/9)";   // Cadena con operadores inválidos

        System.out.println(operadoresValidos(cadena2));
    }

    

}


