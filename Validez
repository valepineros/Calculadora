public class Validez {
    
    public static boolean estaBalanceado(String cadena) {
        boolean res = false;
        boolean valido = true;
        PilaADT pila = new PilaADT();

        for (int i = 0; i < cadena.length() && valido; i++) {
            char c = cadena.charAt(i);

            if (c == '(' || c == '{' || c == '[') {
                pila.push(c);
            } 
            else if (c == ')' || c == '}' || c == ']') {
                try {
                    char top = (char) pila.pop();
                    if ((c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[')) {
                        valido = false;
                    }
                } 
                catch (Exception e) {
                    valido = false;
                }
            }
        }
        if (pila.isEmpty() && valido) {
            res = true;
        }
        return res;
    }

    public static boolean contienePuntosDecimalesValidos(String expresion) {
        int puntoCount = 0; // Contador de puntos decimales en el número actual
        boolean dentroNumero = false; // Indica si estamos dentro de un número
        boolean despuesPunto = false; // Indica si el punto decimal ya ha sido encontrado en el número

        for (char c : expresion.toCharArray()) {
            if (Character.isDigit(c)) {
                dentroNumero = true;
            } else if (c == '.') {
                if (puntoCount > 0 || despuesPunto || !dentroNumero) {
                    return false; // Más de un punto decimal, punto decimal consecutivo o punto decimal al principio/final del número
                }
                puntoCount++;
                despuesPunto = true;
            } else {
                dentroNumero = false; // Reiniciar estado cuando se encuentra un carácter que no es un dígito
                puntoCount = 0;
                despuesPunto = false;
            }
        }

        return true;
    }

}
