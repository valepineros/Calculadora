
import java.util.Arrays;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */

/**
 *
 * @author bpere
 */
public class ConvPosfija {
   
    public static String[] cadenaArr(String cadena) {
    String[] cadenaArr = new String[cadena.length()]; // Se podría ajustar dependiendo de la longitud final
    StringBuilder cad = new StringBuilder();
    int j = 0;
    
    for (int i = 0; i < cadena.length(); i++) {
        char c = cadena.charAt(i);
        
        if (c == '(' || c == ')') {
            if (cad.length() > 0) {
                cadenaArr[j] = cad.toString();
                j++;
                cad.setLength(0);
            }
            cadenaArr[j] = String.valueOf(c);
            j++;
        } else if (Validez.esOperador(c)) {
            if (cad.length() > 0) {
                cadenaArr[j] = cad.toString();
                j++;
                cad.setLength(0);
            }
            cadenaArr[j] = String.valueOf(c);
            j++;
        } else { // Caracteres que no son operadores ni paréntesis
            cad.append(c);
        }
    }
    
    // Agregar el último elemento de cad si no está vacío
    if (cad.length() > 0) {
        cadenaArr[j] = cad.toString();
        j++;
    }
    
    // Redimensionar el arreglo al tamaño adecuado
    return Arrays.copyOf(cadenaArr, j);
}
    public static boolean jerarquia(String a, String b){
        boolean res=false;
        char ac=a.charAt(0);
        char ab=b.charAt(0);
        int acp=0, acb=0;
        
        switch(ac){
            case '^': 
                acp=4;
                break;
            case '*':
                acp=3;
                break;
            case '/': 
                acp=3;
                break;
            case '+': 
                acp=2;
                break;
            case '-': 
                acp=2;
                break;
        }
        switch(ab){
            case '^': 
                acb=4;
                break;
            case '*':
                acb=3;
                break;
            case '/': 
                acb=3;
                break;
            case '+': 
                acb=2;
                break;
            case '-': 
                acb=2;
                break;
        }
        
        if(acp>acb)
            res=true;
        
        return res;
    }
    
    public static String[] infijaAPostfija(String[] in){
        String[] post=new String[in.length];
        PilaADT op=new PilaADT();
        int i=0, j=0;
        
        while(i<in.length && !in[i].isEmpty()){
            if (in[i].equals("("))
                op.push(in[i]);
            else
                if(in[i].equals(")")){
                    while(!"(".equals((String)op.peek())){
                        post[j]=(String)op.pop();
                        j++;    
                    }
                    op.pop();
                }
                else
                    if(!Validez.esOperador(in[i].charAt(0))){
                        post[j]=in[i];
                        j++;
                    }
                    else{
                        while(!op.isEmpty() && jerarquia((String)op.peek(),in[i])){
                            post[j]=(String)op.pop();
                            j++;
                        }
                        op.push(in[i]);
                    }
            i++;          
        }
        while(!op.isEmpty()){
            post[j]=(String)op.pop();
            j++;
        }
        return post;
    }
    
    public static void main(String[] args) {
      String cadena="2+(5*8+9)";
      String[] res=cadenaArr(cadena);
      String[] res2=infijaAPostfija(res);
      res2=infijaAPostfija(res);
      /*for (int i=0; i<res.length; i++){
          System.out.println(res[i]);
      }*/
      for (int i=0; i<res2.length; i++){
          System.out.println(res2[i]);
      }
      
      
      
    }
}
